# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19QtEcunPKjqLJPGXOfPJBShQ4-bF9srv
"""

# Import required libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

# Sample dataset representing different road conditions and accident outcomes
data = {
    'Time': ['Morning', 'Evening', 'Night', 'Morning', 'Night', 'Evening', 'Morning', 'Night', 'Evening', 'Morning'],
    'Weather': ['Clear', 'Rainy', 'Foggy', 'Rainy', 'Foggy', 'Clear', 'Foggy', 'Rainy', 'Clear', 'Clear'],
    'Speed': [60, 45, 30, 50, 35, 55, 40, 25, 65, 70],
    'Accident': [0, 1, 1, 1, 1, 0, 1, 1, 0, 0]
}

# Create a DataFrame from the dataset
df = pd.DataFrame(data)

# Display the dataset
print("Sample Traffic Accident Dataset:\n")
print(df)

# Convert text columns into numeric values for machine learning
df['Time'] = df['Time'].map({'Morning': 0, 'Evening': 1, 'Night': 2})
df['Weather'] = df['Weather'].map({'Clear': 0, 'Rainy': 1, 'Foggy': 2})

# Define input features and output label
X = df[['Time', 'Weather', 'Speed']]
y = df['Accident']

# Split the dataset into training and testing sets (70% train, 30% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train a simple Decision Tree model
model = DecisionTreeClassifier()
model.fit(X_train, y_train)

# Test the model and calculate accuracy
predictions = model.predict(X_test)
accuracy = accuracy_score(y_test, predictions)
print("\nModel Accuracy:", accuracy)

# Take user input for prediction
print("\n--- Predict Accident Risk ---")
input_time = input("Enter time (Morning, Evening, Night): ")
input_weather = input("Enter weather (Clear, Rainy, Foggy): ")
input_speed = float(input("Enter vehicle speed (in km/h): "))

# Convert inputs to numeric values
time_map = {'Morning': 0, 'Evening': 1, 'Night': 2}
weather_map = {'Clear': 0, 'Rainy': 1, 'Foggy': 2}
t = time_map.get(input_time, 0)
w = weather_map.get(input_weather, 0)
s = input_speed

# Predict accident risk
user_data = [[t, w, s]]
prediction = model.predict(user_data)

# Display result
if prediction[0] == 1:
    print("⚠️ High Risk of Accident. Drive Carefully!")
else:
    print("✅ Low Risk of Accident. Stay Safe!")